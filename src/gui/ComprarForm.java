package gui;/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import model.*;

import javax.swing.*;
import java.awt.event.ActionEvent;
import java.awt.event.WindowEvent;

import static java.lang.Float.parseFloat;
import static java.lang.Integer.parseInt;

/**
 * @author Usuario
 */
public class ComprarForm extends javax.swing.JFrame {

    private Compraventa model;
    private Producto producto;

    /**
     * Creates new form CompraForm
     */
    public ComprarForm() {
        initComponents();
    }

    public ComprarForm(Compraventa model, Producto producto) {
        this.model = model;
        this.producto = producto;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        jRadioButton1 = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        metodosList = new javax.swing.JList<>();
        okButton = new javax.swing.JButton();
        precioLabel = new javax.swing.JLabel();
        enviarTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        monederoButton = new javax.swing.JRadioButton();

        jRadioButton1.setText("jRadioButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        updateList();

        okButton.setText("OK");

        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        precioLabel.setText("Precio: " + producto.getPrecio());

        enviarTextField.setText(" ");
        enviarTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enviarTextFieldActionPerformed(evt);
            }
        });

        jLabel2.setText("Enviar a monedero");

        monederoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                monederoButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(32, 32, 32)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(34, 34, 34)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(precioLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addContainerGap())
                                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(enviarTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(monederoButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(27, 27, 27)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(precioLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jLabel2)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addComponent(enviarTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(monederoButton)))
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(okButton)
                                .addContainerGap(115, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>

    private void okButtonActionPerformed(ActionEvent evt) {
        String selected = metodosList.getSelectedValue();
        if(selected == null) {
            JOptionPane.showMessageDialog(this, "No has seleccionado ningún método de pago");
            return;
        }
        String metodo = selected.split(" ")[0];
        Compra compra = new Compra(model.getUsuario(), producto);
        switch (metodo) {
            case "Paypal":
                int numero = parseInt(selected.split(" ")[1]);
                PayPal paypal = model.getUsuario().getPaypals().get(numero - 1);
                //Si el paypal tiene saldo suficiente
                if (paypal.getSaldo() > producto.getPrecio()) {
                    paypal.removeSaldo(producto.getPrecio());
                    compra.setPago(new Pago(compra, paypal));
                    this.model.addCompra(compra);
                    this.model.removeProducto(producto);
                    JOptionPane.showMessageDialog(this, "Compra realizada con éxito");
                    this.model.getGui().updateCompras();
                    this.dispose();
                } else {
                    JOptionPane.showMessageDialog(this, "No hay suficiente saldo en su paypal", "Error", JOptionPane.ERROR_MESSAGE);
                }
                break;
            case "Tarjeta":
                int numeroT = parseInt(selected.split(" ")[1]);
                Tarjeta tarjeta = model.getUsuario().getTarjetas().get(numeroT - 1);
                //Si la tarjeta tiene saldo suficiente
                if (tarjeta.getSaldo() > producto.getPrecio()) {
                    tarjeta.removeSaldo(producto.getPrecio());
                    compra.setPago(new Pago(compra, tarjeta));
                    this.model.addCompra(compra);
                    this.model.removeProducto(producto);
                    JOptionPane.showMessageDialog(this, "Compra realizada con éxito");
                    this.model.getGui().updateCompras();
                    this.dispose();
                } else {
                    JOptionPane.showMessageDialog(this, "No hay suficiente saldo en su tarjeta", "Error", JOptionPane.ERROR_MESSAGE);
                }
                break;
            case "Monedero":
                if(model.getUsuario().getMonedero().getSaldo() >= producto.getPrecio()){
                    model.getUsuario().getMonedero().removeSaldo(producto.getPrecio());
                    compra.setPago(new Pago(compra, this.model.getUsuario().getMonedero()));
                    this.model.addCompra(compra);
                    this.model.removeProducto(producto);
                    JOptionPane.showMessageDialog(this, "Compra realizada con éxito");
                    this.model.getGui().updateCompras();
                    this.dispose();
                }else{
                    JOptionPane.showMessageDialog(this, "No hay suficiente saldo en su monedero", "Error", JOptionPane.ERROR_MESSAGE);
                }
                break;
            case "Chat":
                ChatForm chatForm = new ChatForm(compra.getChat(), this);
                chatForm.setVisible(true);
                break;
        }

    }

    private void formWindowClosed(WindowEvent evt) {
        this.model.getGui().setVisible(true);
    }

    private void enviarTextFieldActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void monederoButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        float cantidad = parseFloat(enviarTextField.getText());
        String selected = metodosList.getSelectedValue();
        if (selected != null) {
            //Cogemos la primera palabra de la cadena selected
            String metodo = selected.split(" ")[0];
            //Cogemos el numero del metodo
            //Si el metodo es tarjeta
            if (metodo.equals("Tarjeta")) {
                int numero = parseInt(selected.split(" ")[1]);
                Tarjeta tarjeta = model.getUsuario().getTarjetas().get(numero - 1);
                //Si la tarjeta tiene saldo suficiente
                if (tarjeta.getSaldo() > cantidad) {
                    this.model.getUsuario().getMonedero().addSaldo(cantidad);
                    tarjeta.removeSaldo(cantidad);
                    updateList();
                    System.out.println("Se ha enviado " + cantidad + "€ a su monedero");
                    System.out.println("Su saldo en la tarjeta es de " + tarjeta.getSaldo() + "€");
                    System.out.println("Su saldo en el monedero es de " + this.model.getUsuario().getMonedero().getSaldo() + "€");
                } else {
                    JOptionPane.showMessageDialog(this, "No hay suficiente saldo en su tarjeta", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else if (metodo.equals("Paypal")) {
                int numeroP = parseInt(selected.split(" ")[1]);
                PayPal paypal = model.getUsuario().getPaypals().get(numeroP - 1);
                //Si el paypal tiene saldo suficiente
                if (paypal.getSaldo() > cantidad) {
                    this.model.getUsuario().getMonedero().addSaldo(cantidad);
                    paypal.removeSaldo(cantidad);
                    updateList();
                    System.out.println("Se ha enviado " + cantidad + "€ a su monedero");
                    System.out.println("Su saldo en el PayPal es de " + paypal.getSaldo() + "€");
                    System.out.println("Su saldo en el monedero es de " + this.model.getUsuario().getMonedero().getSaldo() + "€");
                } else {
                    JOptionPane.showMessageDialog(this, "No hay suficiente saldo en su paypal", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else{
                JOptionPane.showMessageDialog(this, "No se puede enviar dinero a su monedero", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void updateList() {
        jScrollPane1.setViewportView(metodosList);

        String[] metodos = new String[2 + model.getUsuario().getTarjetas().size() + model.getUsuario().getPaypals().size()];
        metodos[0] = "Chat --------------- Negociar Precio";
        metodos[1] = "Monedero --------------- Saldo: " + this.model.getUsuario().getMonedero().getSaldo() + "€";
        for (int i = 0; i < model.getUsuario().getTarjetas().size(); i++) {
            metodos[i + 2] = "Tarjeta " + (i + 1) + " --------------- " + model.getUsuario().getTarjetas().get(i).numeroOculto();
        }
        for (int i = 0; i < model.getUsuario().getPaypals().size(); i++) {
            metodos[i + 2 + model.getUsuario().getTarjetas().size()] = "Paypal " + (i + 1) + " --------------- " + model.getUsuario().getPaypals().get(i).getEmail();
        }

        metodosList.setListData(metodos);
    }

    public void updatePrecio(){
        precioLabel.setText("Precio: " + producto.getPrecio());
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ComprarForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ComprarForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ComprarForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ComprarForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ComprarForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify
    private javax.swing.JTextField enviarTextField;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<String> metodosList;
    private javax.swing.JRadioButton monederoButton;
    private javax.swing.JButton okButton;
    private javax.swing.JLabel precioLabel;
    // End of variables declaration
}
